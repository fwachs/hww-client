/*****************************************************************************filename    timer.asauthor      Rafa ImasDP email    rafael.imas@2clams.comproject     House Wife WarsBrief Description:   Event handling*****************************************************************************/function timerHandler(firingTimer, tick, arg){		Timer.processTimers();}function timerTickUpdate(request_id, ret_code, response_content){	if(ret_code == 1) {		var response = json_loads(response_content);		var currentTick = response.get("currentTick");			trace("Timer tick updated: CurrentTick: ", str(currentTick), ret_code);			Timer.currentMinutesTick = currentTick;		Timer.currentSecondsTick = 0;	}	else {		Timer.currentMinutesTick = Game.sharedGame().getProperty("lastTimerMinuteTick");		Timer.currentSecondsTick = 0;	}}class Timer{	static var currentSecondsTick;	static var currentMinutesTick	static var timersList = new dict();	static var lastTickCheck;	var seconds;	var firingSecondsTick;	var firingMinutesTick;	var ticks;	var name;	var listeners;	var running;	var repetitions;	var args;		public static function registerTimer(timer)	{		Timer.timersList.update(timer.name, timer);		if(timer.load() == 0) {			timer.reset();			timer.save();		}	}		public static function getTimer(name)	{		return Timer.timersList.get(name);	}		public static function registerListener(timerName, listener)	{		var timer = Timer.getTimer(timerName);		timer.listeners.append(listener);		}		public static function unregisterListener(timerName, listener)	{		var timer = Timer.getTimer(timerName);		timer.listeners.remove(listener);		}	public static function startTimers(currentTick)	{		Timer.timersList = new dict();						if(currentTick > 0) {			Timer.currentMinutesTick = currentTick;			Timer.currentSecondsTick = 0;			Game.sharedGame().setProperty("lastTimerMinuteTick", Timer.currentMinutesTick);		}		else {			var storedTick = Game.sharedGame().getProperty("lastTimerMinuteTick");			if(storedTick) {				Timer.currentMinutesTick = storedTick;			}			else {				Timer.currentMinutesTick = 0;			}			Timer.currentSecondsTick = 0;		}		Timer.lastTickCheck = time();				c_addtimer(1000, timerHandler, null, 0, -1);	}		public static function updateRemoteTimerTick()	{	     /* if(getmodel() == 6) return; */				var newTime = time();		if(abs(Timer.lastTickCheck - newTime) > 2000) {			Game.sharedGame().getServer().getCurrentDateAndTick(timerTickUpdate);		}				Timer.lastTickCheck = newTime;	}		public static function processTimers()	{		/*		trace("Timer tick ", Timer.currentMinutesTick, Timer.currentSecondsTick);		*/		Timer.updateRemoteTimerTick();				var keys = Timer.timersList.keys();		for(var i = 0; i < len(keys); i++) {			var timer = Timer.timersList.get(keys[i]);			/*			trace("Timer ", timer.name, " ", timer.firingMinutesTick, timer.firingSecondsTick, timer.ticks, timer.running);			*/			if((Timer.currentSecondsTick + Timer.currentMinutesTick * 60 >= timer.firingSecondsTick + timer.firingMinutesTick * 60) && timer.running == 1) {				var ticks = timer.run();				/*				trace("Timer fired: ", timer.name, " ", timer.firingMinutesTick, timer.firingSecondsTick, 	ticks, timer.running);				*/				if (ticks == 0) {				 	timer.stop();				}			}		}			Timer.currentSecondsTick++;		if(Timer.currentSecondsTick >= 60) {			Timer.currentSecondsTick = 0;			Timer.currentMinutesTick++;			Game.sharedGame().setProperty("lastTimerMinuteTick", Timer.currentMinutesTick);		}	}		public function Timer(name, seconds, reps)	{		this.repetitions = reps;		this.ticks = this.repetitions;		this.seconds = seconds;		this.listeners = new Array();		this.name = name;		this.running = 0;		Timer.registerTimer(this)	}		public function tick()	{	}		public function run()	{		this.tick();		if(this.ticks > 0) {			this.ticks--;		}		for(var i = 0; i < len(this.listeners); i++) {			this.listeners[i].timerFired(this);		}		this.reset();				return this.ticks;	}		public function stop()	{/*		Timer.timersList.pop(this.name);        trace("### HWW ### - Removed timer from DB:", this.name);        Game.getDatabase().remove(this.timerDBKey());*/		this.running = 0;		this.save();	}		public function changeRunningTime(secs)	{		var timeLeft = this.getTimeLeft() + secs;				var deltaMinutes = timeLeft / 60;		var deltaSeconds = timeLeft - deltaMinutes * 60;		this.firingMinutesTick = Timer.currentMinutesTick + deltaMinutes;		this.firingSecondsTick = Timer.currentSecondsTick + deltaSeconds;				this.save();	}		public function reset()	{		var deltaMinutes = this.seconds / 60;		var deltaSeconds = this.seconds - deltaMinutes * 60;				this.firingMinutesTick = Timer.currentMinutesTick + deltaMinutes;		this.firingSecondsTick = Timer.currentSecondsTick + deltaSeconds;				/* trace("resetting timer: ", this.name, this.seconds, this.firingMinutesTick, this.firingSecondsTick); */	}		public function restart()	{		this.reset();		this.ticks = this.repetitions;		this.running = 1;		this.save();	}		public function start()	{		this.running = 1;		this.save();			}		public function getTimeLeft()	{		return (this.firingMinutesTick * 60 + this.firingSecondsTick) - (Timer.currentMinutesTick * 60 + Timer.currentSecondsTick);	}		public function getTimeString()	{		var timeLeft = this.getTimeLeft();		var minutes = timeLeft / 60;		var seconds = timeLeft - (minutes * 60);				if(len(str(seconds)) == 1)			return str(minutes) + ":0" + str(seconds);		else			return str(minutes) + ":" + str(seconds);	}		public function timerDBKey()	{		return "timer_" + str(this.name);	}	public function load() 	{        var timerData = Game.getDatabase().get(this.timerDBKey());        trace("### HWW ### - Fetched timer from DB:", this.name, timerData);                if(timerData == null) {	        this.firingSecondsTick = 0;	        this.firingMinutesTick = 0;	        this.running = 0;	        this.args = dict();	        	        return 0;        }        this.firingSecondsTick = timerData.get("seconds");        this.firingMinutesTick = timerData.get("minutes");        this.running = timerData.get("running");        this.args = timerData.get("args");                return 1;	}	    public function save()    {        var serializedTimer = this.serialize();        trace("### HWW ### - Saving Timer: ",str(serializedTimer));        Game.getDatabase().put(this.timerDBKey(), serializedTimer);    }    public function serialize()    {        var timerData = new dict([["name", this.name], ["seconds", this.firingSecondsTick], ["minutes", this.firingMinutesTick], ["running", this.running], ["args", this.args]]);        return timerData;    }}interface TimerListener{	public function timerFired(timer) {};}